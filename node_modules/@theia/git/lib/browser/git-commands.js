"use strict";
/********************************************************************************
 * Copyright (C) 2017 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __values = (this && this.__values) || function (o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
var inversify_1 = require("inversify");
var uri_1 = require("@theia/core/lib/common/uri");
var core_1 = require("@theia/core");
var common_1 = require("@theia/core/lib/common");
var browser_1 = require("@theia/core/lib/browser");
var browser_2 = require("@theia/editor/lib/browser");
var browser_3 = require("@theia/workspace/lib/browser");
var common_2 = require("../common");
var git_watcher_1 = require("../common/git-watcher");
var git_resource_1 = require("./git-resource");
var git_repository_provider_1 = require("./git-repository-provider");
var git_commit_message_validator_1 = require("./git-commit-message-validator");
var git_error_handler_1 = require("./git-error-handler");
var common_3 = require("@theia/filesystem/lib/common");
var scm_widget_1 = require("@theia/scm/lib/browser/scm-widget");
var GitCommands = /** @class */ (function () {
    function GitCommands(git, gitWatcher, contextMenuRenderer, resourceProvider, commandService, repositoryProvider, labelProvider, scmWidget, commitMessageValidator) {
        var _this = this;
        this.git = git;
        this.gitWatcher = gitWatcher;
        this.contextMenuRenderer = contextMenuRenderer;
        this.resourceProvider = resourceProvider;
        this.commandService = commandService;
        this.repositoryProvider = repositoryProvider;
        this.labelProvider = labelProvider;
        this.scmWidget = scmWidget;
        this.commitMessageValidator = commitMessageValidator;
        this.messageBoxHeight = GitCommands_1.MESSAGE_BOX_MIN_HEIGHT;
        this.toDisposeOnInitialize = new common_1.DisposableCollection();
        this.toDispose = new common_1.DisposableCollection();
        this.stagedChanges = [];
        this.unstagedChanges = [];
        this.mergeChanges = [];
        this.openFile = function (uri) { return _this.doOpenFile(uri); };
        this.refresh = function () { return _this.doRefresh(); };
        this.showMoreToolButtons = function (event) { return _this.doShowMoreToolButtons(event); };
        this.commit = function (repository) { return _this.doCommit.bind(_this)(repository); };
        this.unstageAll = function () { return _this.doUnstageAll(); };
        this.unstage = function (repository, change) { return _this.doUnstage(repository, change); };
        this.discardAll = function () { return _this.doDiscardAll(); };
        this.discard = function (repository, change) { return _this.doDiscard(repository, change); };
        this.stageAll = function () { return _this.doStageAll(); };
        this.stage = function (repository, change) { return _this.doStage(repository, change); };
        this.handleOpenChange = function (change, options) { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {
            return [2 /*return*/, this.openChange(change, options)];
        }); }); };
        this.scmWidget.onUpdate(function () { return __awaiter(_this, void 0, void 0, function () {
            var e_1, _a, repository, status, stagedChanges, unstagedChanges, mergeChanges, _b, _c, change, uri, _d, icon, label, description, e_1_1, sort;
            return __generator(this, function (_e) {
                switch (_e.label) {
                    case 0:
                        repository = this.repositoryProvider.selectedRepository;
                        if (!repository) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.git.status(repository)];
                    case 1:
                        status = _e.sent();
                        _e.label = 2;
                    case 2:
                        stagedChanges = [];
                        unstagedChanges = [];
                        mergeChanges = [];
                        if (!status) return [3 /*break*/, 11];
                        _e.label = 3;
                    case 3:
                        _e.trys.push([3, 8, 9, 10]);
                        _b = __values(status.changes), _c = _b.next();
                        _e.label = 4;
                    case 4:
                        if (!!_c.done) return [3 /*break*/, 7];
                        change = _c.value;
                        uri = new uri_1.default(change.uri);
                        return [4 /*yield*/, Promise.all([
                                this.labelProvider.getIcon(uri),
                                this.labelProvider.getName(uri),
                                repository ? common_2.Repository.relativePath(repository, uri.parent).toString() : this.labelProvider.getLongName(uri.parent)
                            ])];
                    case 5:
                        _d = __read.apply(void 0, [_e.sent(), 3]), icon = _d[0], label = _d[1], description = _d[2];
                        if (common_2.GitFileStatus[common_2.GitFileStatus.Conflicted.valueOf()] !== common_2.GitFileStatus[change.status]) {
                            if (change.staged) {
                                stagedChanges.push(__assign({ icon: icon, label: label, description: description }, change));
                            }
                            else {
                                unstagedChanges.push(__assign({ icon: icon, label: label, description: description }, change));
                            }
                        }
                        else {
                            if (!change.staged) {
                                mergeChanges.push(__assign({ icon: icon, label: label, description: description }, change));
                            }
                        }
                        _e.label = 6;
                    case 6:
                        _c = _b.next();
                        return [3 /*break*/, 4];
                    case 7: return [3 /*break*/, 10];
                    case 8:
                        e_1_1 = _e.sent();
                        e_1 = { error: e_1_1 };
                        return [3 /*break*/, 10];
                    case 9:
                        try {
                            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                        }
                        finally { if (e_1) throw e_1.error; }
                        return [7 /*endfinally*/];
                    case 10:
                        this.incomplete = status.incomplete;
                        _e.label = 11;
                    case 11:
                        sort = function (l, r) { return l.label.localeCompare(r.label); };
                        this.stagedChanges = stagedChanges.sort(sort);
                        this.unstagedChanges = unstagedChanges.sort(sort);
                        this.mergeChanges = mergeChanges.sort(sort);
                        return [2 /*return*/];
                }
            });
        }); });
    }
    GitCommands_1 = GitCommands;
    GitCommands.prototype.openChange = function (change, options) {
        return __awaiter(this, void 0, void 0, function () {
            var uriToOpen;
            return __generator(this, function (_a) {
                uriToOpen = this.getUriToOpen(change);
                return [2 /*return*/, this.editorManager.open(uriToOpen, options)];
            });
        });
    };
    GitCommands.prototype.doCommit = function (repository, options, message) {
        if (message === void 0) { message = this.scmWidget.messageInput.value; }
        return __awaiter(this, void 0, void 0, function () {
            var _a, signOff, amend, error_1, messageInput;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (!repository) return [3 /*break*/, 8];
                        this.commitMessageValidationResult = undefined;
                        if (message.trim().length === 0) {
                            this.commitMessageValidationResult = {
                                status: 'error',
                                message: 'Please provide a commit message'
                            };
                        }
                        _a = this.commitMessageValidationResult === undefined;
                        if (!_a) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.git.status(repository)];
                    case 1:
                        _a = !(_b.sent()).changes.some(function (c) { return c.staged === true; });
                        _b.label = 2;
                    case 2:
                        if (_a) {
                            this.commitMessageValidationResult = {
                                status: 'error',
                                message: 'No changes added to commit'
                            };
                        }
                        if (!(this.commitMessageValidationResult === undefined)) return [3 /*break*/, 7];
                        _b.label = 3;
                    case 3:
                        _b.trys.push([3, 5, , 6]);
                        signOff = options === 'sign-off';
                        amend = options === 'amend';
                        return [4 /*yield*/, this.git.commit(repository, message, { signOff: signOff, amend: amend })];
                    case 4:
                        _b.sent();
                        this.resetCommitMessages();
                        return [3 /*break*/, 6];
                    case 5:
                        error_1 = _b.sent();
                        this.gitErrorHandler.handleError(error_1);
                        return [3 /*break*/, 6];
                    case 6: return [3 /*break*/, 8];
                    case 7:
                        messageInput = this.scmWidget.messageInput;
                        if (messageInput) {
                            messageInput.focus();
                        }
                        _b.label = 8;
                    case 8: return [2 /*return*/];
                }
            });
        });
    };
    GitCommands.prototype.validateCommitMessage = function (input) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.commitMessageValidator.validate(input)];
            });
        });
    };
    GitCommands.prototype.doOpenFile = function (uri) {
        this.editorManager.open(uri, { mode: 'reveal' });
    };
    GitCommands.prototype.doRefresh = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.repositoryProvider.refresh()];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    GitCommands.prototype.doShowMoreToolButtons = function (event) {
        var el = event.target.parentElement;
        if (el) {
            this.contextMenuRenderer.render(scm_widget_1.ScmWidget.ContextMenu.PATH, {
                x: el.getBoundingClientRect().left,
                y: el.getBoundingClientRect().top + el.offsetHeight
            });
        }
    };
    GitCommands.prototype.getUserConfig = function (repository) {
        return __awaiter(this, void 0, void 0, function () {
            var _a, username, email;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, Promise.all([
                            this.git.exec(repository, ['config', 'user.name']),
                            this.git.exec(repository, ['config', 'user.email'])
                        ])];
                    case 1:
                        _a = __read.apply(void 0, [(_b.sent()).map(function (result) { return result.stdout.trim(); }), 2]), username = _a[0], email = _a[1];
                        return [2 /*return*/, [username, email]];
                }
            });
        });
    };
    GitCommands.prototype.doUnstageAll = function () {
        return __awaiter(this, void 0, void 0, function () {
            var repository, status_1, staged;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        repository = this.repositoryProvider.selectedRepository;
                        if (!repository) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.git.status(repository)];
                    case 1:
                        status_1 = _a.sent();
                        staged = status_1.changes.filter(function (change) { return change.staged; });
                        this.unstage(repository, staged);
                        _a.label = 2;
                    case 2: return [2 /*return*/];
                }
            });
        });
    };
    GitCommands.prototype.doUnstage = function (repository, change) {
        return __awaiter(this, void 0, void 0, function () {
            var uris, error_2;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 5, , 6]);
                        if (!Array.isArray(change)) return [3 /*break*/, 2];
                        uris = change.map(function (c) { return c.uri; });
                        return [4 /*yield*/, this.git.unstage(repository, uris)];
                    case 1:
                        _a.sent();
                        return [3 /*break*/, 4];
                    case 2: return [4 /*yield*/, this.git.unstage(repository, change.uri)];
                    case 3:
                        _a.sent();
                        _a.label = 4;
                    case 4: return [3 /*break*/, 6];
                    case 5:
                        error_2 = _a.sent();
                        this.gitErrorHandler.handleError(error_2);
                        return [3 /*break*/, 6];
                    case 6: return [2 /*return*/];
                }
            });
        });
    };
    GitCommands.prototype.doDiscardAll = function () {
        return __awaiter(this, void 0, void 0, function () {
            var repository, newUris, uris, error_3;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.confirmAll()];
                    case 1:
                        if (!_a.sent()) return [3 /*break*/, 6];
                        _a.label = 2;
                    case 2:
                        _a.trys.push([2, 5, , 6]);
                        repository = this.repositoryProvider.selectedRepository;
                        if (!repository) return [3 /*break*/, 4];
                        newUris = this.unstagedChanges.filter(function (c) { return c.status === common_2.GitFileStatus.New; }).map(function (c) { return c.uri; });
                        this.deleteAll(newUris);
                        uris = this.unstagedChanges.map(function (c) { return c.uri; });
                        return [4 /*yield*/, this.git.unstage(repository, uris, { treeish: 'HEAD', reset: 'working-tree' })];
                    case 3:
                        _a.sent();
                        _a.label = 4;
                    case 4: return [3 /*break*/, 6];
                    case 5:
                        error_3 = _a.sent();
                        this.gitErrorHandler.handleError(error_3);
                        return [3 /*break*/, 6];
                    case 6: return [2 /*return*/];
                }
            });
        });
    };
    GitCommands.prototype.doDiscard = function (repository, change) {
        return __awaiter(this, void 0, void 0, function () {
            var error_4;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.git.lsFiles(repository, change.uri, { errorUnmatch: true })];
                    case 1:
                        if (!_a.sent()) return [3 /*break*/, 7];
                        return [4 /*yield*/, this.confirm(change.uri)];
                    case 2:
                        if (!_a.sent()) return [3 /*break*/, 6];
                        _a.label = 3;
                    case 3:
                        _a.trys.push([3, 5, , 6]);
                        return [4 /*yield*/, this.git.unstage(repository, change.uri, { treeish: 'HEAD', reset: 'working-tree' })];
                    case 4:
                        _a.sent();
                        return [3 /*break*/, 6];
                    case 5:
                        error_4 = _a.sent();
                        this.gitErrorHandler.handleError(error_4);
                        return [3 /*break*/, 6];
                    case 6: return [3 /*break*/, 9];
                    case 7: return [4 /*yield*/, this.commandService.executeCommand(browser_3.WorkspaceCommands.FILE_DELETE.id, new uri_1.default(change.uri))];
                    case 8:
                        _a.sent();
                        _a.label = 9;
                    case 9: return [2 /*return*/];
                }
            });
        });
    };
    GitCommands.prototype.confirm = function (path) {
        var uri = new uri_1.default(path);
        return new browser_1.ConfirmDialog({
            title: 'Discard changes',
            msg: "Do you really want to discard changes in " + uri.displayName + "?"
        }).open();
    };
    GitCommands.prototype.confirmAll = function () {
        return new browser_1.ConfirmDialog({
            title: 'Discard All Changes',
            msg: 'Do you really want to discard all changes?'
        }).open();
    };
    GitCommands.prototype.doStageAll = function () {
        var repository = this.repositoryProvider.selectedRepository;
        if (repository) {
            this.stage(repository, this.unstagedChanges);
        }
    };
    GitCommands.prototype.doStage = function (repository, change) {
        return __awaiter(this, void 0, void 0, function () {
            var uris, error_5;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 5, , 6]);
                        if (!Array.isArray(change)) return [3 /*break*/, 2];
                        uris = change.map(function (c) { return c.uri; });
                        return [4 /*yield*/, this.git.add(repository, uris)];
                    case 1:
                        _a.sent();
                        return [3 /*break*/, 4];
                    case 2: return [4 /*yield*/, this.git.add(repository, change.uri)];
                    case 3:
                        _a.sent();
                        _a.label = 4;
                    case 4: return [3 /*break*/, 6];
                    case 5:
                        error_5 = _a.sent();
                        this.gitErrorHandler.handleError(error_5);
                        return [3 /*break*/, 6];
                    case 6: return [2 /*return*/];
                }
            });
        });
    };
    GitCommands.prototype.findChange = function (uri) {
        var stringUri = uri.toString();
        var merge = this.mergeChanges.find(function (c) { return c.uri.toString() === stringUri; });
        if (merge) {
            return merge;
        }
        var unstaged = this.unstagedChanges.find(function (c) { return c.uri.toString() === stringUri; });
        if (unstaged) {
            return unstaged;
        }
        return this.stagedChanges.find(function (c) { return c.uri.toString() === stringUri; });
    };
    GitCommands.prototype.getUriToOpen = function (change) {
        var changeUri = new uri_1.default(change.uri);
        if (change.status !== common_2.GitFileStatus.New) {
            if (change.staged) {
                return browser_1.DiffUris.encode(changeUri.withScheme(git_resource_1.GIT_RESOURCE_SCHEME).withQuery('HEAD'), changeUri.withScheme(git_resource_1.GIT_RESOURCE_SCHEME), changeUri.displayName + ' (Index)');
            }
            if (this.stagedChanges.find(function (c) { return c.uri === change.uri; })) {
                return browser_1.DiffUris.encode(changeUri.withScheme(git_resource_1.GIT_RESOURCE_SCHEME), changeUri, changeUri.displayName + ' (Working tree)');
            }
            if (this.mergeChanges.find(function (c) { return c.uri === change.uri; })) {
                return changeUri;
            }
            return browser_1.DiffUris.encode(changeUri.withScheme(git_resource_1.GIT_RESOURCE_SCHEME).withQuery('HEAD'), changeUri, changeUri.displayName + ' (Working tree)');
        }
        if (change.staged) {
            return changeUri.withScheme(git_resource_1.GIT_RESOURCE_SCHEME);
        }
        if (this.stagedChanges.find(function (c) { return c.uri === change.uri; })) {
            return browser_1.DiffUris.encode(changeUri.withScheme(git_resource_1.GIT_RESOURCE_SCHEME), changeUri, changeUri.displayName + ' (Working tree)');
        }
        return changeUri;
    };
    GitCommands.prototype.resetCommitMessages = function () {
        this.scmWidget.messageInput.value = '';
    };
    GitCommands.prototype.delete = function (uri) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                try {
                    return [2 /*return*/, this.fileSystem.delete(uri.toString())];
                }
                catch (e) {
                    console.error(e);
                }
                return [2 /*return*/];
            });
        });
    };
    GitCommands.prototype.deleteAll = function (uris) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, Promise.all(uris.map(function (uri) { return _this.delete(new uri_1.default(uri)); }))];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    GitCommands.prototype.dispose = function () {
        this.toDispose.dispose();
    };
    var GitCommands_1;
    GitCommands.MESSAGE_BOX_MIN_HEIGHT = 25;
    __decorate([
        inversify_1.inject(browser_2.EditorManager),
        __metadata("design:type", browser_2.EditorManager)
    ], GitCommands.prototype, "editorManager", void 0);
    __decorate([
        inversify_1.inject(git_error_handler_1.GitErrorHandler),
        __metadata("design:type", git_error_handler_1.GitErrorHandler)
    ], GitCommands.prototype, "gitErrorHandler", void 0);
    __decorate([
        inversify_1.inject(common_3.FileSystem),
        __metadata("design:type", Object)
    ], GitCommands.prototype, "fileSystem", void 0);
    GitCommands = GitCommands_1 = __decorate([
        inversify_1.injectable(),
        __param(0, inversify_1.inject(common_2.Git)),
        __param(1, inversify_1.inject(git_watcher_1.GitWatcher)),
        __param(2, inversify_1.inject(browser_1.ContextMenuRenderer)),
        __param(3, inversify_1.inject(core_1.ResourceProvider)),
        __param(4, inversify_1.inject(core_1.CommandService)),
        __param(5, inversify_1.inject(git_repository_provider_1.GitRepositoryProvider)),
        __param(6, inversify_1.inject(browser_1.LabelProvider)),
        __param(7, inversify_1.inject(scm_widget_1.ScmWidget)),
        __param(8, inversify_1.inject(git_commit_message_validator_1.GitCommitMessageValidator)),
        __metadata("design:paramtypes", [Object, git_watcher_1.GitWatcher, Object, Function, Object, git_repository_provider_1.GitRepositoryProvider,
            browser_1.LabelProvider,
            scm_widget_1.ScmWidget,
            git_commit_message_validator_1.GitCommitMessageValidator])
    ], GitCommands);
    return GitCommands;
}());
exports.GitCommands = GitCommands;
//# sourceMappingURL=git-commands.js.map