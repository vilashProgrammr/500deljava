"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
/********************************************************************************
 * Copyright (C) 2019 Red Hat, Inc. and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var inversify_1 = require("inversify");
var browser_1 = require("@theia/core/lib/browser");
var scm_service_1 = require("./scm-service");
var uri_1 = require("@theia/core/lib/common/uri");
var core_1 = require("@theia/core");
var scm_quick_open_service_1 = require("./scm-quick-open-service");
exports.SCM_WIDGET_FACTORY_ID = 'scm';
var ScmContribution = /** @class */ (function (_super) {
    __extends(ScmContribution, _super);
    function ScmContribution() {
        return _super.call(this, {
            widgetId: exports.SCM_WIDGET_FACTORY_ID,
            widgetName: 'SCM',
            defaultWidgetOptions: {
                area: 'left',
                rank: 300
            },
            toggleCommandId: 'scmView:toggle',
            toggleKeybinding: 'ctrlcmd+shift+g'
        }) || this;
    }
    ScmContribution.prototype.initializeLayout = function (app) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.openView()];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    ScmContribution.prototype.onStart = function () {
        var _this = this;
        var CHANGE_REPOSITORY = {
            id: 'scm.change.repository',
            label: 'SCM: Change Repository...'
        };
        var refresh = function (commands) {
            _this.statusBarCommands = [CHANGE_REPOSITORY.id];
            commands.forEach(function (command) {
                _this.statusBarCommands.push(command.id);
                var statusBaCommand = {
                    text: command.text,
                    tooltip: command.tooltip,
                    command: command.command,
                    alignment: browser_1.StatusBarAlignment.LEFT,
                    priority: 100
                };
                _this.statusBar.setElement(command.id, statusBaCommand);
            });
        };
        this.scmService.onDidAddRepository(function (repository) {
            var onDidChangeStatusBarCommands = repository.provider.onDidChangeStatusBarCommands;
            if (onDidChangeStatusBarCommands) {
                onDidChangeStatusBarCommands(function (commands) { return refresh(commands); });
            }
        });
        this.scmService.onDidRemoveRepository(function () {
            _this.scmService.selectedRepository = _this.scmService.repositories[0];
        });
        this.commandRegistry.registerCommand(CHANGE_REPOSITORY, {
            execute: function () {
                _this.scmQuickOpenService.changeRepository();
            }
        });
        this.scmService.onDidChangeSelectedRepositories(function (repository) {
            if (repository) {
                if (_this.scmService.repositories.length === 1) {
                    _this.statusBar.removeElement(CHANGE_REPOSITORY.id);
                }
                else {
                    var path = _this.labelProvider.getName(new uri_1.default(repository.provider.rootUri));
                    _this.statusBar.setElement(CHANGE_REPOSITORY.id, {
                        text: "$(database) " + path,
                        tooltip: path.toString(),
                        command: CHANGE_REPOSITORY.id,
                        alignment: browser_1.StatusBarAlignment.LEFT,
                        priority: 100
                    });
                }
            }
            else {
                _this.statusBarCommands.forEach(function (id) {
                    _this.statusBar.removeElement(id);
                });
            }
        });
    };
    ScmContribution.prototype.onStop = function (app) {
        this.scmService.dispose();
    };
    __decorate([
        inversify_1.inject(browser_1.StatusBar),
        __metadata("design:type", Object)
    ], ScmContribution.prototype, "statusBar", void 0);
    __decorate([
        inversify_1.inject(scm_service_1.ScmService),
        __metadata("design:type", scm_service_1.ScmService)
    ], ScmContribution.prototype, "scmService", void 0);
    __decorate([
        inversify_1.inject(core_1.CommandRegistry),
        __metadata("design:type", core_1.CommandRegistry)
    ], ScmContribution.prototype, "commandRegistry", void 0);
    __decorate([
        inversify_1.inject(browser_1.QuickOpenService),
        __metadata("design:type", browser_1.QuickOpenService)
    ], ScmContribution.prototype, "quickOpenService", void 0);
    __decorate([
        inversify_1.inject(scm_quick_open_service_1.ScmQuickOpenService),
        __metadata("design:type", scm_quick_open_service_1.ScmQuickOpenService)
    ], ScmContribution.prototype, "scmQuickOpenService", void 0);
    __decorate([
        inversify_1.inject(browser_1.LabelProvider),
        __metadata("design:type", browser_1.LabelProvider)
    ], ScmContribution.prototype, "labelProvider", void 0);
    ScmContribution = __decorate([
        inversify_1.injectable(),
        __metadata("design:paramtypes", [])
    ], ScmContribution);
    return ScmContribution;
}(browser_1.AbstractViewContribution));
exports.ScmContribution = ScmContribution;
//# sourceMappingURL=scm-contribution.js.map