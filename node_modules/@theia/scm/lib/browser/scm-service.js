"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
/********************************************************************************
 * Copyright (C) 2019 Red Hat, Inc. and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var common_1 = require("@theia/core/lib/common");
var inversify_1 = require("inversify");
var ScmService = /** @class */ (function () {
    function ScmService() {
        this.providerIds = new Set();
        this._repositories = [];
        this.disposableCollection = new common_1.DisposableCollection();
        this.onDidChangeSelectedRepositoriesEmitter = new common_1.Emitter();
        this.onDidAddProviderEmitter = new common_1.Emitter();
        this.onDidRemoveProviderEmitter = new common_1.Emitter();
        this.onDidChangeSelectedRepositories = this.onDidChangeSelectedRepositoriesEmitter.event;
        this.disposableCollection.push(this.onDidChangeSelectedRepositoriesEmitter);
        this.disposableCollection.push(this.onDidAddProviderEmitter);
        this.disposableCollection.push(this.onDidRemoveProviderEmitter);
    }
    Object.defineProperty(ScmService.prototype, "repositories", {
        get: function () {
            return __spread(this._repositories);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ScmService.prototype, "selectedRepository", {
        get: function () {
            return this._selectedRepository;
        },
        set: function (repository) {
            this._selectedRepository = repository;
            this.onDidChangeSelectedRepositoriesEmitter.fire(repository);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ScmService.prototype, "onDidAddRepository", {
        get: function () {
            return this.onDidAddProviderEmitter.event;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ScmService.prototype, "onDidRemoveRepository", {
        get: function () {
            return this.onDidRemoveProviderEmitter.event;
        },
        enumerable: true,
        configurable: true
    });
    ScmService.prototype.registerScmProvider = function (provider, disposables) {
        var _this = this;
        if (this.providerIds.has(provider.id)) {
            throw new Error("SCM Provider " + provider.id + " already exists.");
        }
        this.providerIds.add(provider.id);
        var disposable = common_1.Disposable.create(function () {
            var index = _this._repositories.indexOf(repository);
            if (index < 0) {
                return;
            }
            _this.providerIds.delete(provider.id);
            _this._repositories.splice(index, 1);
            _this.onDidRemoveProviderEmitter.fire(repository);
        });
        var disposableCollection = new common_1.DisposableCollection(disposable);
        if (disposables) {
            disposableCollection.pushAll(disposables);
        }
        var repository = new ScmRepository(provider, disposableCollection);
        this._repositories.push(repository);
        this.onDidAddProviderEmitter.fire(repository);
        if (this._repositories.length === 1) {
            this.selectedRepository = repository;
        }
        return repository;
    };
    ScmService.prototype.dispose = function () {
        this.disposableCollection.dispose();
    };
    ScmService = __decorate([
        inversify_1.injectable(),
        __metadata("design:paramtypes", [])
    ], ScmService);
    return ScmService;
}());
exports.ScmService = ScmService;
var ScmRepository = /** @class */ (function () {
    function ScmRepository(provider, disposable) {
        this.provider = provider;
        this.disposable = disposable;
        this.onDidFocusEmitter = new common_1.Emitter();
        this.onDidFocus = this.onDidFocusEmitter.event;
        this.onDidChangeSelectionEmitter = new common_1.Emitter();
        this.onDidChangeSelection = this.onDidChangeSelectionEmitter.event;
        this.disposables = new common_1.DisposableCollection();
        this.input = new ScmInputImpl();
        this.disposables.push(this.disposable);
        this.disposables.push(this.onDidChangeSelectionEmitter);
        this.disposables.push(this.input);
    }
    ScmRepository.prototype.focus = function () {
        this.onDidFocusEmitter.fire(undefined);
    };
    ScmRepository.prototype.dispose = function () {
        this.disposables.dispose();
        this.provider.dispose();
    };
    return ScmRepository;
}());
exports.ScmRepository = ScmRepository;
var ScmInputImpl = /** @class */ (function () {
    function ScmInputImpl() {
        this._value = '';
        this._placeholder = '';
        this._validateInput = function () { return Promise.resolve(undefined); };
        this.onDidChangePlaceholderEmitter = new common_1.Emitter();
        this.onDidChangeValidateInputEmitter = new common_1.Emitter();
        this.onDidChangeEmitter = new common_1.Emitter();
        this.disposables = new common_1.DisposableCollection();
        this.disposables.push(this.onDidChangePlaceholderEmitter);
        this.disposables.push(this.onDidChangeValidateInputEmitter);
        this.disposables.push(this.onDidChangeEmitter);
    }
    Object.defineProperty(ScmInputImpl.prototype, "value", {
        get: function () {
            return this._value;
        },
        set: function (value) {
            if (this._value === value) {
                return;
            }
            this._value = value;
            this.onDidChangeEmitter.fire(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ScmInputImpl.prototype, "onDidChange", {
        get: function () {
            return this.onDidChangeEmitter.event;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ScmInputImpl.prototype, "placeholder", {
        get: function () {
            return this._placeholder;
        },
        set: function (placeholder) {
            this._placeholder = placeholder;
            this.onDidChangePlaceholderEmitter.fire(placeholder);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ScmInputImpl.prototype, "validateInput", {
        get: function () {
            return this._validateInput;
        },
        set: function (validateInput) {
            this._validateInput = validateInput;
            this.onDidChangeValidateInputEmitter.fire(undefined);
        },
        enumerable: true,
        configurable: true
    });
    ScmInputImpl.prototype.dispose = function () {
        this.disposables.dispose();
    };
    return ScmInputImpl;
}());
//# sourceMappingURL=scm-service.js.map