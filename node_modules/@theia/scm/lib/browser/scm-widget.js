"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
/********************************************************************************
 * Copyright (C) 2019 Red Hat, Inc. and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var inversify_1 = require("inversify");
var browser_1 = require("@theia/core/lib/browser");
var React = require("react");
var alert_message_1 = require("@theia/core/lib/browser/widgets/alert-message");
var scm_service_1 = require("./scm-service");
var core_1 = require("@theia/core");
var scm_avatar_service_1 = require("./scm-avatar-service");
var scm_title_command_registry_1 = require("./scm-title-command-registry");
var scm_resource_command_registry_1 = require("./scm-resource-command-registry");
var scm_group_command_registry_1 = require("./scm-group-command-registry");
var scm_navigable_list_widget_1 = require("./scm-navigable-list-widget");
var scm_amend_component_1 = require("./scm-amend-component");
var ScmWidget = /** @class */ (function (_super) {
    __extends(ScmWidget, _super);
    function ScmWidget() {
        var _this = _super.call(this) || this;
        _this.message = '';
        _this.messageBoxHeight = ScmWidget_1.MESSAGE_BOX_MIN_HEIGHT;
        _this.onUpdateEmitter = new core_1.Emitter();
        _this.selectChange = function (change) {
            var repository = _this.scmService.selectedRepository;
            if (repository) {
                var resources_1 = [];
                var groups = repository.provider.groups;
                if (groups) {
                    groups.forEach(function (group) { return group.resources.forEach(function (resource) { return resources_1.push(resource); }); });
                    _this.scmNodes = resources_1;
                }
            }
            _this.selectNode(change);
        };
        _this.addScmListKeyListeners = function (id) { return _this.doAddScmListKeyListeners(id); };
        _this.showMoreToolButtons = function (event, group) { return _this.doShowMoreToolButtons(event, group); };
        _this.setInputMessages = function (message) { return _this.doSetInputMessages(message); };
        _this.id = 'theia-scmContainer';
        _this.addClass('theia-scm');
        _this.scrollContainer = ScmWidget_1.Styles.GROUPS_CONTAINER;
        _this.update();
        return _this;
    }
    ScmWidget_1 = ScmWidget;
    ScmWidget.prototype.init = function () {
        var _this = this;
        var changeHandler = function (repository) {
            repository.provider.onDidChangeResources(function () {
                if (_this.selectedRepoUri === repository.provider.rootUri) {
                    _this.update();
                }
            });
            repository.provider.onDidChange(function () {
                _this.update();
            });
        };
        this.scmService.repositories.forEach(function (repository) {
            changeHandler(repository);
        });
        this.scmService.onDidAddRepository(function (repository) {
            changeHandler(repository);
        });
        this.scmService.onDidChangeSelectedRepositories(function (repository) {
            if (repository) {
                _this.selectedRepoUri = repository.provider.rootUri;
                _this.title.label = ScmWidget_1.LABEL + ': ' + repository.provider.contextValue;
            }
            else {
                _this.title.label = ScmWidget_1.LABEL;
                _this.selectedRepoUri = undefined;
            }
            var area = _this.shell.getAreaFor(_this);
            if (area === 'left') {
                _this.shell.leftPanelHandler.refresh();
            }
            else if (area === 'right') {
                _this.shell.rightPanelHandler.refresh();
            }
            _this.update();
        });
    };
    ScmWidget.prototype.onBeforeAttach = function (msg) {
        var repository = this.scmService.selectedRepository;
        this.title.iconClass = 'scm-tab-icon';
        this.title.label = ScmWidget_1.LABEL + (repository ? ': ' + repository.provider.contextValue : '');
        this.title.caption = ScmWidget_1.LABEL;
        this.title.closable = true;
        _super.prototype.onBeforeAttach.call(this, msg);
    };
    Object.defineProperty(ScmWidget.prototype, "onUpdate", {
        get: function () {
            return this.onUpdateEmitter.event;
        },
        enumerable: true,
        configurable: true
    });
    ScmWidget.prototype.onUpdateRequest = function (msg) {
        _super.prototype.onUpdateRequest.call(this, msg);
        this.onUpdateEmitter.fire(undefined);
    };
    ScmWidget.prototype.doAddScmListKeyListeners = function (id) {
        var container = document.getElementById(id);
        if (container) {
            this.addScmListNavigationKeyListeners(container);
        }
    };
    ScmWidget.prototype.handleListEnter = function () {
        var selected = this.getSelected();
        if (selected) {
            var items = this.scmResourceCommandRegistry.getItems(selected.group.label);
            if (items && items.length > 0) {
                this.commandRegistry.executeCommand(items[0].command, selected.sourceUri.toString());
            }
        }
    };
    ScmWidget.prototype.render = function () {
        var _this = this;
        var repository;
        if (this.selectedRepoUri) {
            repository = this.scmService.repositories.find(function (repo) { return repo.provider.rootUri === _this.selectedRepoUri; });
        }
        else {
            repository = this.scmService.selectedRepository;
        }
        if (!repository) {
            return React.createElement(alert_message_1.AlertMessage, { type: 'WARNING', header: 'Source control is not available at this time' });
        }
        var input = repository.input;
        this.inputCommandMessageValidator = input.validateInput;
        var amendSupport = repository.provider.amendSupport;
        return React.createElement("div", { className: ScmWidget_1.Styles.MAIN_CONTAINER },
            React.createElement("div", { className: 'headerContainer', style: { flexGrow: 0 } },
                this.renderInput(input, repository),
                this.renderCommandBar(repository)),
            React.createElement(ScmResourceGroupsContainer, { style: { flexGrow: 1 }, id: this.scrollContainer, repository: repository, scmResourceCommandRegistry: this.scmResourceCommandRegistry, scmGroupCommandRegistry: this.scmGroupCommandRegistry, commandRegistry: this.commandRegistry, selectChange: this.selectChange, scmNodes: this.scmNodes, addScmListKeyListeners: this.addScmListKeyListeners, renderContextMenu: this.showMoreToolButtons }),
            amendSupport
                ? React.createElement(scm_amend_component_1.ScmAmendComponent, { key: "amend:" + repository.provider.rootUri, style: { flexGrow: 0 }, id: this.scrollContainer, repository: repository, scmAmendSupport: amendSupport, setCommitMessage: this.setInputMessages, avatarService: this.avatarService, storageService: this.storageService })
                : '');
    };
    ScmWidget.prototype.renderInput = function (input, repository) {
        var _this = this;
        var validationStatus = this.inputCommandMessageValidation ? this.inputCommandMessageValidation.type : 'idle';
        var validationMessage = this.inputCommandMessageValidation ? this.inputCommandMessageValidation.message : '';
        var keyBinding = navigator.appVersion.indexOf('Mac') !== -1 ? 'Cmd+Enter' : 'Ctrl+Enter';
        // tslint:disable-next-line:no-any
        var format = function (value) {
            var args = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args[_i - 1] = arguments[_i];
            }
            if (args.length !== 0) {
                return value.replace(/{(\d+)}/g, function (found, n) {
                    var i = parseInt(n);
                    return isNaN(i) || i < 0 || i >= args.length ? found : args[i];
                });
            }
            return value;
        };
        var message = format(input.placeholder, keyBinding);
        var handleHotKey = function (event) {
            if (event.key === 'Enter' && event.ctrlKey) {
                var command = repository.provider.acceptInputCommand;
                if (command) {
                    _this.executeInputCommand(command.id, repository.provider.handle);
                }
            }
        };
        return React.createElement("div", { className: ScmWidget_1.Styles.INPUT_MESSAGE_CONTAINER },
            React.createElement("textarea", { className: ScmWidget_1.Styles.INPUT_MESSAGE + " theia-scm-input-message-" + validationStatus, style: {
                    height: this.messageBoxHeight,
                    overflow: this.messageBoxHeight > ScmWidget_1.MESSAGE_BOX_MIN_HEIGHT ? 'auto' : 'hidden'
                }, autoFocus: true, onInput: this.onInputMessageChange.bind(this), placeholder: "" + message, id: ScmWidget_1.Styles.INPUT_MESSAGE, defaultValue: "" + input.value, onKeyPress: handleHotKey, tabIndex: 1 }),
            React.createElement("div", { className: ScmWidget_1.Styles.VALIDATION_MESSAGE + " " + ScmWidget_1.Styles.NO_SELECT + "\n                    theia-scm-validation-message-" + validationStatus + " theia-scm-input-message-" + validationStatus, style: {
                    display: !!this.inputCommandMessageValidation ? 'block' : 'none'
                } }, validationMessage));
    };
    Object.defineProperty(ScmWidget.prototype, "messageInput", {
        get: function () {
            return document.getElementById(ScmWidget_1.Styles.INPUT_MESSAGE);
        },
        enumerable: true,
        configurable: true
    });
    ScmWidget.prototype.onInputMessageChange = function (e) {
        var _this = this;
        var target = e.target;
        if (target instanceof HTMLTextAreaElement) {
            var value = target.value;
            this.message = value;
            var repository = this.scmService.selectedRepository;
            var equal_1 = function (left, right) {
                if (left && right) {
                    return left.message === right.message && left.type === right.type;
                }
                return left === right;
            };
            if (repository) {
                repository.input.value = value;
            }
            this.resize(target);
            if (this.inputCommandMessageValidator) {
                this.inputCommandMessageValidator(value).then(function (result) {
                    if (!equal_1(_this.inputCommandMessageValidation, result)) {
                        _this.inputCommandMessageValidation = result;
                        _this.update();
                    }
                });
            }
        }
    };
    ScmWidget.prototype.renderCommandBar = function (repository) {
        var _this = this;
        var onClick = function (event) {
            _this.showMoreToolButtons(event, undefined);
        };
        return React.createElement("div", { id: 'commandBar', className: 'flexcontainer' },
            React.createElement("div", { className: 'buttons' },
                this.scmTitleRegistry.getItems().map(function (command) { return _this.renderButton(command); }),
                React.createElement("a", { className: 'toolbar-button', title: 'More...', onClick: onClick },
                    React.createElement("i", { className: 'fa fa-ellipsis-h' }))),
            React.createElement("div", { className: 'placeholder' }),
            this.renderInputCommand(repository));
    };
    ScmWidget.prototype.doShowMoreToolButtons = function (event, group) {
        var el = event.target.parentElement;
        if (el) {
            this.contextMenuRenderer.render(group ? group : ScmWidget_1.ContextMenu.PATH, {
                x: el.getBoundingClientRect().left,
                y: el.getBoundingClientRect().top + el.offsetHeight
            });
        }
    };
    ScmWidget.prototype.renderButton = function (item) {
        var _this = this;
        var command = this.commandRegistry.getCommand(item.command);
        if (item.when) {
            var provider = item.when.substring(item.when.indexOf('scmProvider == ') + 15);
            var repository = this.scmService.selectedRepository;
            if (repository) {
                if (provider.toLowerCase() !== repository.provider.label.toLowerCase()) {
                    return;
                }
            }
        }
        if (command) {
            if (item.group && item.group === 'navigation') {
                var execute = function () {
                    _this.commandRegistry.executeCommand(item.command);
                };
                return React.createElement("a", { className: 'toolbar-button', key: command.id },
                    React.createElement("i", { className: command.iconClass, title: command.label, onClick: execute }));
            }
        }
    };
    ScmWidget.prototype.renderInputCommand = function (repository) {
        var _this = this;
        if (repository && repository.provider.acceptInputCommand) {
            var command_1 = repository.provider.acceptInputCommand;
            return React.createElement("div", { className: 'buttons' },
                React.createElement("button", { className: 'theia-button', onClick: function () {
                        _this.executeInputCommand(command_1.id, repository.provider.handle);
                    }, title: "" + command_1.tooltip }, "" + repository.provider.acceptInputCommand.text));
        }
    };
    ScmWidget.prototype.executeInputCommand = function (commandId, providerId) {
        this.inputCommandMessageValidation = undefined;
        if (this.message.trim().length === 0) {
            this.inputCommandMessageValidation = {
                type: 'error',
                message: 'Please provide an input'
            };
        }
        if (this.inputCommandMessageValidation === undefined) {
            this.commandRegistry.executeCommand(commandId, providerId);
            this.doSetInputMessages('');
            this.update();
        }
        else {
            var messageInput = this.messageInput;
            if (messageInput) {
                this.update();
                messageInput.focus();
            }
        }
    };
    ScmWidget.prototype.doSetInputMessages = function (message) {
        this.message = message;
        var messageInput = this.messageInput;
        messageInput.value = message;
        this.resize(messageInput);
    };
    ScmWidget.prototype.resize = function (textArea) {
        // tslint:disable-next-line:no-null-keyword
        var fontSize = Number.parseInt(window.getComputedStyle(textArea, undefined).getPropertyValue('font-size').split('px')[0] || '0', 10);
        var value = textArea.value;
        if (Number.isInteger(fontSize) && fontSize > 0) {
            var requiredHeight = fontSize * value.split(/\r?\n/).length;
            if (requiredHeight < textArea.scrollHeight) {
                textArea.style.height = requiredHeight + "px";
            }
        }
        if (textArea.clientHeight < textArea.scrollHeight) {
            textArea.style.height = textArea.scrollHeight + "px";
            if (textArea.clientHeight < textArea.scrollHeight) {
                textArea.style.height = (textArea.scrollHeight * 2 - textArea.clientHeight) + "px";
            }
        }
        var updatedHeight = textArea.style.height;
        if (updatedHeight) {
            this.messageBoxHeight = parseInt(updatedHeight, 10) || ScmWidget_1.MESSAGE_BOX_MIN_HEIGHT;
            if (this.messageBoxHeight > ScmWidget_1.MESSAGE_BOX_MIN_HEIGHT) {
                textArea.style.overflow = 'auto';
            }
            else {
                // Hide the scroll-bar if we shrink down the size.
                textArea.style.overflow = 'hidden';
            }
        }
    };
    // tslint:disable-next-line:no-any
    ScmWidget.prototype.restoreState = function (oldState) {
        var _this = this;
        this.selectedRepoUri = oldState.selectedRepoUri;
        var repository = this.scmService.repositories.find(function (repo) { return repo.provider.rootUri === _this.selectedRepoUri; });
        if (repository) {
            // repository.setSelected(true);
            this.scmService.selectedRepository = repository;
            this.message = oldState.message;
        }
    };
    ScmWidget.prototype.storeState = function () {
        return {
            selectedRepoUri: this.selectedRepoUri,
            message: this.message
        };
    };
    var ScmWidget_1;
    ScmWidget.MESSAGE_BOX_MIN_HEIGHT = 25;
    ScmWidget.LABEL = 'Source Control';
    __decorate([
        inversify_1.inject(scm_title_command_registry_1.ScmTitleCommandRegistry),
        __metadata("design:type", scm_title_command_registry_1.ScmTitleCommandRegistry)
    ], ScmWidget.prototype, "scmTitleRegistry", void 0);
    __decorate([
        inversify_1.inject(scm_resource_command_registry_1.ScmResourceCommandRegistry),
        __metadata("design:type", scm_resource_command_registry_1.ScmResourceCommandRegistry)
    ], ScmWidget.prototype, "scmResourceCommandRegistry", void 0);
    __decorate([
        inversify_1.inject(scm_group_command_registry_1.ScmGroupCommandRegistry),
        __metadata("design:type", scm_group_command_registry_1.ScmGroupCommandRegistry)
    ], ScmWidget.prototype, "scmGroupCommandRegistry", void 0);
    __decorate([
        inversify_1.inject(scm_service_1.ScmService),
        __metadata("design:type", scm_service_1.ScmService)
    ], ScmWidget.prototype, "scmService", void 0);
    __decorate([
        inversify_1.inject(core_1.CommandRegistry),
        __metadata("design:type", core_1.CommandRegistry)
    ], ScmWidget.prototype, "commandRegistry", void 0);
    __decorate([
        inversify_1.inject(browser_1.ApplicationShell),
        __metadata("design:type", browser_1.ApplicationShell)
    ], ScmWidget.prototype, "shell", void 0);
    __decorate([
        inversify_1.inject(browser_1.ContextMenuRenderer),
        __metadata("design:type", Object)
    ], ScmWidget.prototype, "contextMenuRenderer", void 0);
    __decorate([
        inversify_1.inject(scm_avatar_service_1.ScmAvatarService),
        __metadata("design:type", scm_avatar_service_1.ScmAvatarService)
    ], ScmWidget.prototype, "avatarService", void 0);
    __decorate([
        inversify_1.inject(browser_1.StorageService),
        __metadata("design:type", Object)
    ], ScmWidget.prototype, "storageService", void 0);
    __decorate([
        inversify_1.postConstruct(),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", void 0)
    ], ScmWidget.prototype, "init", null);
    ScmWidget = ScmWidget_1 = __decorate([
        inversify_1.injectable(),
        __metadata("design:paramtypes", [])
    ], ScmWidget);
    return ScmWidget;
}(scm_navigable_list_widget_1.ScmNavigableListWidget));
exports.ScmWidget = ScmWidget;
(function (ScmWidget) {
    var Styles;
    (function (Styles) {
        Styles.MAIN_CONTAINER = 'theia-scm-main-container';
        Styles.PROVIDER_CONTAINER = 'theia-scm-provider-container';
        Styles.PROVIDER_NAME = 'theia-scm-provider-name';
        Styles.GROUPS_CONTAINER = 'groups-outer-container';
        Styles.INPUT_MESSAGE_CONTAINER = 'theia-scm-input-message-container';
        Styles.INPUT_MESSAGE = 'theia-scm-input-message';
        Styles.VALIDATION_MESSAGE = 'theia-scm-input-validation-message';
        Styles.NO_SELECT = 'no-select';
    })(Styles = ScmWidget.Styles || (ScmWidget.Styles = {}));
    var ContextMenu;
    (function (ContextMenu) {
        ContextMenu.PATH = ['scm-widget-context-menu'];
        ContextMenu.INPUT_GROUP = __spread(ContextMenu.PATH, ['1_input']);
        ContextMenu.FIRST_GROUP = __spread(ContextMenu.PATH, ['2_other']);
        ContextMenu.SECOND_GROUP = __spread(ContextMenu.PATH, ['3_other']);
        ContextMenu.BATCH = __spread(ContextMenu.PATH, ['3_batch']);
    })(ContextMenu = ScmWidget.ContextMenu || (ScmWidget.ContextMenu = {}));
})(ScmWidget = exports.ScmWidget || (exports.ScmWidget = {}));
exports.ScmWidget = ScmWidget;
var ScmResourceItem = /** @class */ (function (_super) {
    __extends(ScmResourceItem, _super);
    function ScmResourceItem() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.selectChange = function () { return _this.props.selectChange(_this.props.resource); };
        return _this;
    }
    ScmResourceItem.prototype.render = function () {
        var _this = this;
        var _a = this.props, name = _a.name, path = _a.path, icon = _a.icon, letter = _a.letter, color = _a.color, open = _a.open;
        var style = {
            color: color
        };
        var renderContextMenu = function (event) {
            event.preventDefault();
            _this.props.renderContextMenu(event, ['scm-resource-context-menu_' + _this.props.groupId]);
        };
        var tooltip = this.props.resource.decorations ? this.props.resource.decorations.tooltip : '';
        return React.createElement("div", { className: "scmItem " + ScmWidget.Styles.NO_SELECT + (this.props.resource.selected ? ' ' + browser_1.SELECTED_CLASS : ''), onContextMenu: renderContextMenu },
            React.createElement("div", { className: 'noWrapInfo', onDoubleClick: open, onClick: this.selectChange },
                React.createElement("span", { className: icon + ' file-icon' }),
                React.createElement("span", { className: 'name' }, name),
                React.createElement("span", { className: 'path' }, path)),
            React.createElement("div", { className: 'itemButtonsContainer' },
                this.renderScmItemButtons(),
                React.createElement("div", { title: "" + tooltip, className: 'status', style: style }, letter)));
    };
    ScmResourceItem.prototype.renderScmItemButtons = function () {
        var _this = this;
        var items = this.props.scmResourceCommandRegistry.getItems(this.props.groupId);
        if (items) {
            return React.createElement("div", { className: 'buttons' }, items.map(function (item) { return _this.renderScmItemButton(item); }));
        }
    };
    ScmResourceItem.prototype.renderScmItemButton = function (item) {
        var _this = this;
        var command = this.props.commandRegistry.getCommand(item.command);
        if (command) {
            var execute = function () {
                var resource = _this.props.resource;
                var arg = {
                    id: 3,
                    handle: resource.handle,
                    groupHandle: resource.groupHandle,
                    sourceControlHandle: resource.sourceControlHandle,
                    uri: _this.props.resource.sourceUri.toString()
                };
                _this.props.commandRegistry.executeCommand(item.command, arg);
            };
            return React.createElement("div", { className: 'toolbar-button', key: command.id },
                React.createElement("a", { className: command.iconClass, title: command.label, onClick: execute }));
        }
    };
    return ScmResourceItem;
}(React.Component));
var ScmResourceGroupsContainer = /** @class */ (function (_super) {
    __extends(ScmResourceGroupsContainer, _super);
    function ScmResourceGroupsContainer() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ScmResourceGroupsContainer.prototype.render = function () {
        var _this = this;
        return (React.createElement("div", { className: ScmWidget.Styles.GROUPS_CONTAINER, style: this.props.style, id: this.props.id, tabIndex: 2 }, this.props.repository.provider.groups ? this.props.repository.provider.groups.map(function (group) { return _this.renderGroup(group); }) : undefined));
    };
    ScmResourceGroupsContainer.prototype.renderGroup = function (group) {
        if (group.resources.length > 0) {
            return React.createElement(ScmResourceGroupContainer, { group: group, key: group.id, scmResourceCommandRegistry: this.props.scmResourceCommandRegistry, scmGroupCommandRegistry: this.props.scmGroupCommandRegistry, selectChange: this.props.selectChange, scmNodes: this.props.scmNodes, renderContextMenu: this.props.renderContextMenu, commandRegistry: this.props.commandRegistry });
        }
    };
    ScmResourceGroupsContainer.prototype.componentDidMount = function () {
        this.props.addScmListKeyListeners(this.props.id);
    };
    return ScmResourceGroupsContainer;
}(React.Component));
var ScmResourceGroupContainer = /** @class */ (function (_super) {
    __extends(ScmResourceGroupContainer, _super);
    function ScmResourceGroupContainer() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ScmResourceGroupContainer.prototype.render = function () {
        var _this = this;
        var group = this.props.group;
        var renderContextMenu = function (event) {
            event.preventDefault();
            _this.props.renderContextMenu(event, ['scm-group-context-menu_' + group.id]);
        };
        return React.createElement("div", { className: 'changesContainer', key: "" + group.id },
            React.createElement("div", { className: 'theia-header scm-theia-header', onContextMenu: renderContextMenu },
                React.createElement("div", { className: 'noWrapInfo' }, "" + group.label),
                this.renderGroupButtons(),
                this.renderChangeCount(group.resources.length)),
            React.createElement("div", null, group.resources.map(function (resource) { return _this.renderScmResourceItem(_this.props.scmNodes, resource, group.provider.rootUri); })));
    };
    ScmResourceGroupContainer.prototype.renderChangeCount = function (changes) {
        if (changes) {
            return React.createElement("div", { className: 'notification-count-container scm-change-count' },
                React.createElement("span", { className: 'notification-count' }, changes));
        }
    };
    ScmResourceGroupContainer.prototype.renderGroupButtons = function () {
        var _this = this;
        var items = this.props.scmGroupCommandRegistry.getItems(this.props.group.id);
        if (items) {
            return React.createElement("div", { className: 'scm-change-list-buttons-container' }, items.map(function (item) { return _this.renderGroupButton(item); }));
        }
    };
    ScmResourceGroupContainer.prototype.renderGroupButton = function (item) {
        var _this = this;
        var command = this.props.commandRegistry.getCommand(item.command);
        if (command) {
            if (item.group && item.group === 'inline') {
                var execute = function () {
                    var group = _this.props.group;
                    var arg = {
                        id: 2,
                        groupHandle: group.handle,
                        sourceControlHandle: group.sourceControlHandle
                    };
                    _this.props.commandRegistry.executeCommand(item.command, arg);
                };
                return React.createElement("a", { className: 'toolbar-button', key: command.id },
                    React.createElement("i", { className: command.iconClass, title: command.label, onClick: execute }));
            }
        }
    };
    ScmResourceGroupContainer.prototype.renderScmResourceItem = function (scmNodes, resource, repoUri) {
        if (!repoUri) {
            return undefined;
        }
        var open = function () {
            resource.open();
            return Promise.resolve(undefined);
        };
        if (scmNodes) {
            var res = scmNodes.find(function (node) { return node.sourceUri.toString() === resource.sourceUri.toString() &&
                ((node.group && resource.group) ? node.group.label === resource.group.label : true); });
            if (res) {
                resource = res;
            }
        }
        var decorations = resource.decorations;
        var uri = resource.sourceUri.path.toString();
        var project = repoUri.substring(repoUri.lastIndexOf('/') + 1);
        var name = uri.substring(uri.lastIndexOf('/') + 1) + ' ';
        var path = uri.substring(uri.lastIndexOf(project) + project.length + 1, uri.lastIndexOf('/'));
        return React.createElement(ScmResourceItem, { key: "" + resource.sourceUri, name: name, path: path.length > 1 ? path : '', icon: (decorations && decorations.icon) ? decorations.icon : '', color: (decorations && decorations.color) ? decorations.color : '', letter: (decorations && decorations.letter) ? decorations.letter : '', resource: resource, open: open, groupLabel: this.props.group.label, groupId: this.props.group.id, commandRegistry: this.props.commandRegistry, scmResourceCommandRegistry: this.props.scmResourceCommandRegistry, selectChange: this.props.selectChange, renderContextMenu: this.props.renderContextMenu });
    };
    return ScmResourceGroupContainer;
}(React.Component));
//# sourceMappingURL=scm-widget.js.map